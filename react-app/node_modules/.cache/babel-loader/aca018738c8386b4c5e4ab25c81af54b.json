{"ast":null,"code":"const LOAD_PROJECTS = 'saved_projects/LOAD';\nconst ADD_PROJECTS = 'saved_projects/ADD';\nconst REMOVE_PROJECTS = 'saved_projects/REMOVE';\n\nconst loadSavedProjects = saved_projects => ({\n  type: LOAD_PROJECTS,\n  saved_projects\n});\n\nconst addSavedProject = saved_projects => ({\n  type: ADD_PROJECTS,\n  saved_projects\n});\n\nconst remove = saved_projects => ({\n  type: REMOVE_PROJECTS,\n  saved_projects\n}); // get all saved projects \n\n\nexport const getSavedProjects = () => async dispatch => {\n  const res = await fetch(`/api/saved`);\n  const projects = await res.json();\n  dispatch(loadSavedProjects(projects));\n};\nexport const addProject = payload => async dispatch => {\n  const {\n    user_id,\n    title,\n    instruction,\n    supplies,\n    cost,\n    duration,\n    action,\n    type,\n    image_url,\n    live_links,\n    created_at,\n    updated_at\n  } = payload;\n  const res = await fetch(`/api/saved`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      user_id,\n      title,\n      instruction,\n      supplies,\n      cost,\n      duration,\n      action,\n      type,\n      image_url,\n      live_links,\n      created_at,\n      updated_at\n    })\n  });\n  let newSavedProject;\n\n  if (res.ok) {\n    newSavedProject = await res.json();\n    dispatch(addSavedProject(newSavedProject));\n  }\n\n  return newSavedProject;\n}; // delete a project \n\nexport const deleteSavedProject = projectId => async dispatch => {\n  const res = await fetch(`/api/saved/${projectId}`, {\n    method: 'DELETE'\n  });\n\n  if (res.ok) {\n    dispatch(remove(projectId));\n  }\n};\nexport default function savedProjectReducer(state = {}, action) {\n  switch (action.type) {\n    case LOAD_PROJECTS:\n      const newSavedProjects = {};\n      action['savedProjects'].savedProjects.forEach(project => {\n        newProjects[project.id] = project;\n      });\n      return { ...state,\n        ...newProjects\n      };\n\n    case ADD_PROJECTS:\n      if (!state[action.savedProject.id]) {\n        return { ...state,\n          [action.savedProject.id]: action.savedProject\n        };\n      }\n\n      return { ...state,\n        [action.savedProject.id]: { ...state[action.savedProject.id]\n        }\n      };\n\n    case REMOVE_PROJECTS:\n      let newState = { ...state\n      };\n      delete newState[action.savedProject];\n      return newState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/tayynicc/ReNewME/react-app/src/store/saved_project.js"],"names":["LOAD_PROJECTS","ADD_PROJECTS","REMOVE_PROJECTS","loadSavedProjects","saved_projects","type","addSavedProject","remove","getSavedProjects","dispatch","res","fetch","projects","json","addProject","payload","user_id","title","instruction","supplies","cost","duration","action","image_url","live_links","created_at","updated_at","method","headers","body","JSON","stringify","newSavedProject","ok","deleteSavedProject","projectId","savedProjectReducer","state","newSavedProjects","savedProjects","forEach","project","newProjects","id","savedProject","newState"],"mappings":"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","sourcesContent":["const LOAD_PROJECTS = 'saved_projects/LOAD'\nconst ADD_PROJECTS = 'saved_projects/ADD'\nconst REMOVE_PROJECTS = 'saved_projects/REMOVE'\n\n\nconst loadSavedProjects = (saved_projects) => ({\n    type: LOAD_PROJECTS,\n    saved_projects\n})\n\n\nconst addSavedProject = (saved_projects) => ({\n    type: ADD_PROJECTS,\n    saved_projects\n})\n\nconst remove = (saved_projects) => ({\n    type: REMOVE_PROJECTS,\n    saved_projects\n})\n\n\n// get all saved projects \nexport const getSavedProjects = () => async(dispatch) => {\n    const res = await fetch(`/api/saved`);\n    const projects = await res.json()\n    dispatch(loadSavedProjects(projects))\n}\n\n\nexport const addProject = (payload) => async dispatch => {\n    const {\n        user_id, \n        title, \n        instruction, \n        supplies,\n        cost,\n        duration,\n        action,\n        type,\n        image_url,\n        live_links,\n        created_at,\n        updated_at\n    } = payload\n\n    const res = await fetch(`/api/saved`, {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({user_id, title, instruction, supplies,cost, duration, action, type, image_url, live_links, created_at, updated_at})\n    });\n\n    let newSavedProject;\n    if(res.ok) {\n        newSavedProject = await res.json();\n        dispatch(addSavedProject(newSavedProject))\n    }\n\n    return newSavedProject\n}\n\n\n// delete a project \nexport const deleteSavedProject = projectId => async dispatch => {\n    const res = await fetch(`/api/saved/${projectId}`, {\n        method: 'DELETE'\n    })\n\n    if (res.ok) { \n        dispatch(remove(projectId))\n    }\n}\n\n\n\nexport default function savedProjectReducer(state={}, action){\n    switch (action.type) {\n        case LOAD_PROJECTS:\n            const newSavedProjects = {}\n            action['savedProjects'].savedProjects.forEach(project => {\n                newProjects[project.id] = project;\n            })\n            return {\n                ...state,\n                ...newProjects\n            }\n        case ADD_PROJECTS:\n            if(!state[action.savedProject.id]) {\n                return {\n                    ...state,\n                    [action.savedProject.id] : action.savedProject\n                }\n            }\n            return {\n                ...state,\n                [action.savedProject.id] : {\n                    ...state[action.savedProject.id]\n                }\n            }\n        case REMOVE_PROJECTS:\n            let newState = { ...state }\n            delete newState[action.savedProject]\n            return newState\n        default:\n            return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}