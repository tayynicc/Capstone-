{"ast":null,"code":"const LOAD_PROJECTS = 'project/LOAD';\n\nconst loadProjects = projects => ({\n  type: LOAD_PROJECTS,\n  projects\n});\n\nexport const getProjects = () => async dispatch => {\n  const res = await fetch(`/api/projects`);\n  const projects = await res.json();\n  dispatch(loadProjects(projects));\n};\nexport default function projectReducer(state = {}, action) {\n  switch (action.type) {\n    case LOAD_Projects:\n      const newProjects = {};\n      action['projects'].projects.forEach(project => {\n        newProjects[portfolio.id] = portfolio;\n      });\n      return { ...state,\n        ...newPortfolios\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/tayynicc/ReNewME/react-app/src/store/project.js"],"names":["LOAD_PROJECTS","loadProjects","projects","type","getProjects","dispatch","res","fetch","json","projectReducer","state","action","LOAD_Projects","newProjects","forEach","project","portfolio","id","newPortfolios"],"mappings":"AAAA,MAAMA,aAAa,GAAG,cAAtB;;AAGA,MAAMC,YAAY,GAAIC,QAAD,KAAe;AAChCC,EAAAA,IAAI,EAAEH,aAD0B;AAEhCE,EAAAA;AAFgC,CAAf,CAArB;;AAOA,OAAO,MAAME,WAAW,GAAG,MAAM,MAAMC,QAAN,IAAmB;AAChD,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,eAAF,CAAvB;AACA,QAAML,QAAQ,GAAG,MAAMI,GAAG,CAACE,IAAJ,EAAvB;AACAH,EAAAA,QAAQ,CAACJ,YAAY,CAACC,QAAD,CAAb,CAAR;AACH,CAJM;AAQP,eAAe,SAASO,cAAT,CAAwBC,KAAK,GAAC,EAA9B,EAAkCC,MAAlC,EAAyC;AACpD,UAAQA,MAAM,CAACR,IAAf;AACI,SAAKS,aAAL;AACI,YAAMC,WAAW,GAAG,EAApB;AACAF,MAAAA,MAAM,CAAC,UAAD,CAAN,CAAmBT,QAAnB,CAA4BY,OAA5B,CAAoCC,OAAO,IAAI;AAC3CF,QAAAA,WAAW,CAACG,SAAS,CAACC,EAAX,CAAX,GAA4BD,SAA5B;AACH,OAFD;AAGA,aAAO,EACH,GAAGN,KADA;AAEH,WAAGQ;AAFA,OAAP;;AAKJ;AACI,aAAOR,KAAP;AAZR;AAcH","sourcesContent":["const LOAD_PROJECTS = 'project/LOAD'\n\n\nconst loadProjects = (projects) => ({\n    type: LOAD_PROJECTS,\n    projects\n})\n\n\n\nexport const getProjects = () => async(dispatch) => {\n    const res = await fetch(`/api/projects`);\n    const projects = await res.json()\n    dispatch(loadProjects(projects))\n}\n\n\n\nexport default function projectReducer(state={}, action){\n    switch (action.type) {\n        case LOAD_Projects:\n            const newProjects = {}\n            action['projects'].projects.forEach(project => {\n                newProjects[portfolio.id] = portfolio;\n            })\n            return {\n                ...state,\n                ...newPortfolios\n            }\n\n        default:\n            return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}