{"ast":null,"code":"const LOAD_REVIEWS = 'review/LOAD';\nconst ADD_REVIEW = 'review/ADD';\nconst EDIT_REVIEW = 'review/EDIT';\nconst REMOVE_REVIEW = 'review/REMOVE';\n\nconst loadReviews = review => ({\n  type: LOAD_REVIEWS,\n  review\n});\n\nconst addOneReview = review => ({\n  type: ADD_REVIEW,\n  review\n});\n\nconst remove = review => ({\n  type: REMOVE_REVIEW,\n  review\n});\n\nconst update = review => ({\n  type: EDIT_REVIEW,\n  review\n}); // get all reviews\n\n\nexport const getReviews = () => async dispatch => {\n  const res = await fetch(`/api/reviews`);\n  const reviews = await res.json();\n  dispatch(loadReviews(reviews));\n}; // add new review \n\nexport const createOneReview = payload => async dispatch => {\n  const {\n    project_id,\n    user_id,\n    body,\n    created_at,\n    updated_at\n  } = payload;\n  const res = await fetch(`/api/reviews`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      project_id,\n      user_id,\n      body,\n      created_at,\n      updated_at\n    })\n  });\n  let newReview;\n\n  if (res.ok) {\n    newReview = await res.json();\n    dispatch(addOneReview(newReview));\n  }\n\n  return newReview;\n}; // edit review \n\nexport const editReview = review => async dispatch => {\n  const res = await fetch(`/api/reviews/${review.id}`, {\n    method: 'PUT',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(review)\n  });\n\n  if (res.ok) {\n    const review = await res.json();\n    dispatch(update(review));\n  }\n}; // delete a review \n\nexport const deleteReview = reviewId => async dispatch => {\n  const res = await fetch(`/api/reviews/${reviewId}`, {\n    method: 'DELETE'\n  });\n\n  if (res.ok) {\n    dispatch(remove(reviewId));\n  }\n};\nexport default function reviewReducer(state = {}, action) {\n  switch (action.type) {\n    case LOAD_REVIEWS:\n      const newReviews = {};\n      action['reviews'].reviews.forEach(review => {\n        newReviews[review.id] = review;\n      });\n      return { ...state,\n        ...newReviews\n      };\n\n    case ADD_REVIEW:\n      if (!state[action.review.id]) {\n        return { ...state,\n          [action.review.id]: action.review\n        };\n      }\n\n      return { ...state,\n        [action.review.id]: { ...state[action.review.id]\n        }\n      };\n\n    case REMOVE_REVIEW:\n      let newState = { ...state\n      };\n      delete newState[action.reviewId];\n      return newState;\n\n    case EDIT_PROJECT:\n      return { ...state,\n        [action.project.id]: action.project\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/tayynicc/ReNewME/react-app/src/store/reviews.js"],"names":["LOAD_REVIEWS","ADD_REVIEW","EDIT_REVIEW","REMOVE_REVIEW","loadReviews","review","type","addOneReview","remove","update","getReviews","dispatch","res","fetch","reviews","json","createOneReview","payload","project_id","user_id","body","created_at","updated_at","method","headers","JSON","stringify","newReview","ok","editReview","id","deleteReview","reviewId","reviewReducer","state","action","newReviews","forEach","newState","EDIT_PROJECT","project"],"mappings":"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","sourcesContent":["const LOAD_REVIEWS = 'review/LOAD'\nconst ADD_REVIEW = 'review/ADD'\nconst EDIT_REVIEW = 'review/EDIT'\nconst REMOVE_REVIEW = 'review/REMOVE'\n\n\nconst loadReviews = (review) => ({\n    type: LOAD_REVIEWS,\n    review\n})\n\nconst addOneReview = (review) => ({\n    type: ADD_REVIEW,\n    review\n})\n\nconst remove = (review) => ({\n    type: REMOVE_REVIEW,\n    review\n})\n\nconst update = (review) => ({\n    type: EDIT_REVIEW,\n    review\n})\n\n\n// get all reviews\nexport const getReviews = () => async(dispatch) => {\n    const res = await fetch(`/api/reviews`);\n    const reviews = await res.json()\n    dispatch(loadReviews(reviews))\n}\n\n\n\n// add new review \nexport const createOneReview = (payload) => async dispatch => {\n    const {\n       project_id,\n       user_id,\n       body,\n       created_at,\n       updated_at\n    } = payload \n\n    const res = await fetch(`/api/reviews`, {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({project_id, user_id, body, created_at, updated_at})\n    });\n\n    let newReview;\n    if (res.ok){\n        newReview = await res.json();\n        dispatch(addOneReview(newReview))\n    }\n\n    return newReview\n}\n\n\n\n// edit review \nexport const editReview = review => async dispatch => {\n    const res = await fetch(`/api/reviews/${review.id}`, {\n        method: 'PUT',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(review)\n    })\n\n    if (res.ok) {\n        const review = await res.json()\n        dispatch(update(review))\n    }\n}\n\n\n// delete a review \nexport const deleteReview = reviewId => async dispatch => {\n    const res = await fetch(`/api/reviews/${reviewId}`, {\n        method: 'DELETE'\n    })\n\n    if (res.ok) {\n        dispatch(remove(reviewId))\n    }\n}\n\nexport default function reviewReducer(state={}, action){\n    switch (action.type) {\n        case LOAD_REVIEWS:\n            const newReviews= {}\n            action['reviews'].reviews.forEach(review => {\n                newReviews[review.id] = review;\n            })\n            return {\n                ...state,\n                ...newReviews\n            }\n        case ADD_REVIEW:\n            if(!state[action.review.id]) {\n                return {\n                    ...state,\n                    [action.review.id] : action.review\n                }\n            }\n            return {\n                ...state,\n                [action.review.id] : {\n                    ...state[action.review.id]\n                }\n            }\n            case REMOVE_REVIEW:\n                let newState = { ...state }\n                delete newState[action.reviewId]\n                return newState\n\n            case EDIT_PROJECT:\n                return {\n                    ...state,\n                    [action.project.id] : action.project\n                }\n    \n        default:\n            return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}