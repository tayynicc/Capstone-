{"ast":null,"code":"const LOAD_PROJECTS = 'projects/LOAD';\nconst ADD_PROJECTS = 'projects/ADD';\nconst EDIT_PROJECT = 'projects/EDIT';\nconst REMOVE_PROJECTS = 'projects/REMOVE';\n\nconst loadProjects = projects => ({\n  type: LOAD_PROJECTS,\n  projects\n});\n\nconst addOneProject = projects => ({\n  type: ADD_PROJECTS,\n  projects\n});\n\nconst remove = project => ({\n  type: REMOVE_PROJECTS,\n  project\n});\n\nconst update = project => ({\n  type: EDIT_PROJECT,\n  project\n}); // get all projects \n\n\nexport const getProjects = () => async dispatch => {\n  const res = await fetch(`/api/projects`);\n  const projects = await res.json();\n  dispatch(loadProjects(projects));\n}; // add a new project \n\nexport const createOneProject = payload => async dispatch => {\n  const {\n    user_id,\n    title,\n    instruction,\n    supplies,\n    cost,\n    duration,\n    action,\n    type,\n    image_url,\n    live_links,\n    created_at,\n    updated_at\n  } = payload;\n  const res = await fetch(`/api/projects`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      user_id,\n      title,\n      instruction,\n      supplies,\n      cost,\n      duration,\n      action,\n      type,\n      image_url,\n      live_links,\n      created_at,\n      updated_at\n    })\n  });\n  let newProject;\n\n  if (res.ok) {\n    newProject = await res.json();\n    dispatch(addOneProject(newProject));\n  }\n\n  return newProject;\n}; // update a project \n\nexport const editProject = project => async dispatch => {\n  const res = await fetch(`/api/projects/${project.id}`, {\n    method: 'PUT',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(project)\n  });\n\n  if (res.ok) {\n    const project = await res.json();\n    dispatch(update(project));\n  }\n}; // delete a project \n\nexport const deleteProject = projectId => async dispatch => {\n  const res = await fetch(`/api/projects/${projectId}`, {\n    method: 'DELETE'\n  });\n\n  if (res.ok) {\n    dispatch(remove(projectId));\n  }\n};\nexport default function projectReducer(state = {}, action) {\n  switch (action.type) {\n    case LOAD_PROJECTS:\n      const newProjects = {};\n      action['projects'].projects.forEach(project => {\n        newProjects[project.id] = project;\n      });\n      return { ...state,\n        ...newProjects\n      };\n\n    case ADD_PROJECTS:\n      if (!state[action.project.id]) {\n        return { ...state,\n          [action.project.id]: action.project\n        };\n      }\n\n      return { ...state,\n        [action.project.id]: { ...state[action.project.id]\n        }\n      };\n\n    case REMOVE_PROJECTS:\n      let newState = { ...state\n      };\n      delete newState[action.project];\n      return newState;\n\n    case EDIT_PROJECT:\n      return { ...state,\n        [action.project.id]: action.project\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/tayynicc/ReNewME/react-app/src/store/project.js"],"names":["LOAD_PROJECTS","ADD_PROJECTS","EDIT_PROJECT","REMOVE_PROJECTS","loadProjects","projects","type","addOneProject","remove","project","update","getProjects","dispatch","res","fetch","json","createOneProject","payload","user_id","title","instruction","supplies","cost","duration","action","image_url","live_links","created_at","updated_at","method","headers","body","JSON","stringify","newProject","ok","editProject","id","deleteProject","projectId","projectReducer","state","newProjects","forEach","newState"],"mappings":"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","sourcesContent":["const LOAD_PROJECTS = 'projects/LOAD'\nconst ADD_PROJECTS = 'projects/ADD'\nconst EDIT_PROJECT = 'projects/EDIT'\nconst REMOVE_PROJECTS = 'projects/REMOVE'\n\n\nconst loadProjects = (projects) => ({\n    type: LOAD_PROJECTS,\n    projects\n})\n\n\nconst addOneProject = (projects) => ({\n    type: ADD_PROJECTS,\n    projects\n})\n\nconst remove = (project) => ({\n    type: REMOVE_PROJECTS,\n    project\n})\n\nconst update = (project) => ({\n    type: EDIT_PROJECT,\n    project\n})\n\n// get all projects \nexport const getProjects = () => async(dispatch) => {\n    const res = await fetch(`/api/projects`);\n    const projects = await res.json()\n    dispatch(loadProjects(projects))\n}\n\n\n// add a new project \nexport const createOneProject = (payload) => async dispatch => {\n    const {\n        user_id, \n        title, \n        instruction, \n        supplies,\n        cost,\n        duration,\n        action,\n        type,\n        image_url,\n        live_links,\n        created_at,\n        updated_at\n    } = payload\n\n    const res = await fetch(`/api/projects`, {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({user_id, title, instruction, supplies,cost, duration, action, type, image_url, live_links, created_at, updated_at})\n    });\n\n    let newProject;\n    if(res.ok) {\n        newProject = await res.json();\n        dispatch(addOneProject(newProject))\n    }\n\n    return newProject\n}\n\n\n// update a project \nexport const editProject = project => async dispatch => {\n    const res = await fetch(`/api/projects/${project.id}`, {\n        method: 'PUT',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(project)\n    })\n\n    if (res.ok) {\n        const project = await res.json()\n        dispatch(update(project))\n    }\n}\n\n\n// delete a project \nexport const deleteProject = projectId => async dispatch => {\n    const res = await fetch(`/api/projects/${projectId}`, {\n        method: 'DELETE'\n    })\n\n    if (res.ok) { \n        dispatch(remove(projectId))\n    }\n}\n\n\n\nexport default function projectReducer(state={}, action){\n    switch (action.type) {\n        case LOAD_PROJECTS:\n            const newProjects = {}\n            action['projects'].projects.forEach(project => {\n                newProjects[project.id] = project;\n            })\n            return {\n                ...state,\n                ...newProjects\n            }\n        case ADD_PROJECTS:\n            if(!state[action.project.id]) {\n                return {\n                    ...state,\n                    [action.project.id] : action.project\n                }\n            }\n            return {\n                ...state,\n                [action.project.id] : {\n                    ...state[action.project.id]\n                }\n            }\n            case REMOVE_PROJECTS:\n                let newState = { ...state }\n                delete newState[action.project]\n                return newState\n\n            case EDIT_PROJECT:\n                return {\n                    ...state,\n                    [action.project.id] : action.project\n                }\n        default:\n            return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}